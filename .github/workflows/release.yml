name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'Release'

jobs:
  trigger-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Trigger build workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build.yml',
              ref: context.ref,
              inputs: {
                version: '${{ context.payload.inputs.version }}'
              }
            })
      
      - name: Wait for build to complete
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflowId = 'build.yml';
            const ref = context.ref;
            const version = context.payload.inputs.version;
            
            console.log(`Waiting for workflow ${workflowId} on ${ref}...`);
            
            let attempts = 0;
            const maxAttempts = 30; // 30 attempts * 10 seconds = 5 minutes max
            
            while (attempts < maxAttempts) {
              attempts++;
              
              // Get workflow runs
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: workflowId,
                branch: ref.replace('refs/heads/', ''),
                per_page: 10
              });
              
              // Find the latest run triggered by this workflow
              const latestRun = runs.workflow_runs.find(run => 
                run.head_sha === context.sha && 
                (run.display_title === `Build ${version}` || run.display_title.includes('Build'))
              );
              
              if (latestRun) {
                console.log(`Found run ${latestRun.id} with status: ${latestRun.status}`);
                
                if (latestRun.status === 'completed') {
                  if (latestRun.conclusion === 'success') {
                    console.log('Build completed successfully!');
                    return;
                  } else if (latestRun.conclusion === 'failure') {
                    throw new Error(`Build failed with conclusion: ${latestRun.conclusion}`);
                  } else {
                    console.log(`Build completed with conclusion: ${latestRun.conclusion}`);
                    return;
                  }
                } else {
                  console.log(`Build still in progress: ${latestRun.status}...`);
                }
              } else {
                console.log('Build run not found yet, waiting...');
              }
              
              // Wait 10 seconds before next check
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
            
            throw new Error('Timeout waiting for build workflow to complete');

  download-builds:
    needs: trigger-build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: mock-qcc-*

      - name: Extract and prepare release files
        shell: bash
        run: |
          mkdir -p release-assets
          cd dist
          
          # Extract each zip file and prepare for release
          for zip_file in mock-qcc-*.zip; do
            if [[ -f "$zip_file" ]]; then
              # Extract the zip file
              unzip "$zip_file" -d "../release-assets/"
              
              # Get the base name without extension
              base_name=$(basename "$zip_file" .zip)
              
              # Move the executable to the release assets directory with proper name
              if [[ "$base_name" == *"windows"* ]]; then
                mv "../release-assets/mock-qcc.exe" "../release-assets/mock-qcc-windows-x64.exe"
              elif [[ "$base_name" == *"linux"* ]]; then
                mv "../release-assets/mock-qcc" "../release-assets/mock-qcc-linux-x64"
              elif [[ "$base_name" == *"macos"* ]]; then
                mv "../release-assets/mock-qcc" "../release-assets/mock-qcc-macos-x64"
              fi
            fi
          done

      - name: Upload prepared assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/

  create-release:
    needs: download-builds
    runs-on: ubuntu-latest
    if: github.event.inputs.version != ''
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download prepared assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            ## Release Notes
            
            ${{ github.event.inputs.release_notes }}
            
            ## Downloads
            
            This release includes pre-built binaries for the following platforms:
            
            - **Linux (x64)**: `mock-qcc-linux-x64`
            - **Windows (x64)**: `mock-qcc-windows-x64.exe`
            - **macOS (x64)**: `mock-qcc-macos-x64`
            
            ## Installation
            
            Download the appropriate binary for your platform and make it executable:
            
            ```bash
            # Linux/macOS
            chmod +x mock-qcc-linux-x64
            ./mock-qcc-linux-x64 443 "/data" "/data/cert.pem" "/data/key.pem"
            
            # Windows
            mock-qcc-windows-x64.exe 443 "/data" "/data/cert.pem" "/data/key.pem"
            ```
            
            ## Usage
            
            ```bash
            # Basic usage
            ./mock-qcc <port> <working-directory> <cert-file> <key-file>
            
            # Examples
            ./mock-qcc 443 "/data" "/data/cert.pem" "/data/key.pem"
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/mock-qcc-linux-x64
          asset_name: mock-qcc-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/mock-qcc-windows-x64.exe
          asset_name: mock-qcc-windows-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/mock-qcc-macos-x64
          asset_name: mock-qcc-macos-x64
          asset_content_type: application/octet-stream