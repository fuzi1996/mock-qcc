name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'Release'

jobs:
  trigger-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Trigger build workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build.yml',
              ref: context.ref,
              inputs: {
                version: '${{ github.event.inputs.version }}'
              }
            })
      
      - name: Wait for build to complete
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflowId = 'build.yml';
            const ref = context.ref;
            const version = context.payload.inputs.version;
            
            console.log(`Waiting for workflow ${workflowId} on ${ref}...`);
            
            let attempts = 0;
            const maxAttempts = 30; // 30 attempts * 10 seconds = 5 minutes max
            
            while (attempts < maxAttempts) {
              attempts++;
              
              // Get workflow runs
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: workflowId,
                branch: ref.replace('refs/heads/', ''),
                per_page: 10
              });
              
              // Find the latest run triggered by this workflow
              const latestRun = runs.workflow_runs.find(run => 
                run.head_sha === context.sha && 
                (run.display_title === `Build ${version}` || run.display_title.includes('Build'))
              );
              
              if (latestRun) {
                console.log(`Found run ${latestRun.id} with status: ${latestRun.status}`);
                
                if (latestRun.status === 'completed') {
                  if (latestRun.conclusion === 'success') {
                    console.log('Build completed successfully!');
                    return;
                  } else if (latestRun.conclusion === 'failure') {
                    throw new Error(`Build failed with conclusion: ${latestRun.conclusion}`);
                  } else {
                    console.log(`Build completed with conclusion: ${latestRun.conclusion}`);
                    return;
                  }
                } else {
                  console.log(`Build still in progress: ${latestRun.status}...`);
                }
              } else {
                console.log('Build run not found yet, waiting...');
              }
              
              // Wait 10 seconds before next check
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
            
            throw new Error('Timeout waiting for build workflow to complete');

  create-release:
    needs: trigger-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ github.event.inputs.version }}';
            const fs = require('fs');
            const path = require('path');
            
            console.log(`Downloading artifacts for release ${version}...`);
            
            // Find the build workflow run
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'build.yml',
              branch: 'master',
              per_page: 10
            });
            
            // Find the specific build triggered by this release
            const buildRun = runs.workflow_runs.find(run => 
              run.head_sha === context.sha && 
              run.display_title && run.display_title.includes(version)
            );
            
            if (!buildRun) {
              throw new Error('Build workflow run not found');
            }
            
            console.log(`Found build run: ${buildRun.id}`);
            
            // List artifacts from the build run
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: buildRun.id
            });
            
            const releaseArtifacts = artifacts.artifacts.filter(a => a.name.startsWith('mock-qcc-'));
            
            if (releaseArtifacts.length === 0) {
              throw new Error('No build artifacts found');
            }
            
            // Download each artifact
            for (const artifact of releaseArtifacts) {
              console.log(`Downloading artifact: ${artifact.name}`);
              
              const { data: zipData } = await github.rest.actions.downloadArtifact({
                owner,
                repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const artifactPath = path.join('release-assets', `${artifact.name}.zip`);
              fs.mkdirSync('release-assets', { recursive: true });
              fs.writeFileSync(artifactPath, Buffer.from(zipData));
            }
            
            console.log(`Downloaded ${releaseArtifacts.length} artifacts`);

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            ## Release Notes
            
            ${{ github.event.inputs.release_notes }}
            
            ## Downloads
            
            This release includes pre-built binaries for the following platforms:
            
            - **Linux (x64)**: `mock-qcc-linux-x64.zip`
            - **Windows (x64)**: `mock-qcc-windows-x64.zip`
            - **macOS (x64)**: `mock-qcc-macos-x64.zip`
            
            ## Installation
            
            Download the appropriate zip file for your platform, extract it, and make the binary executable:
            
            ```bash
            # Linux/macOS
            unzip mock-qcc-linux-x64.zip
            chmod +x mock-qcc
            ./mock-qcc 443 "/data" "/data/cert.pem" "/data/key.pem"
            
            # Windows
            unzip mock-qcc-windows-x64.zip
            mock-qcc.exe 443 "/data" "/data/cert.pem" "/data/key.pem"
            ```
            
            ## Usage
            
            ```bash
            # Basic usage
            ./mock-qcc <port> <working-directory> <cert-file> <key-file>
            
            # Examples
            ./mock-qcc 443 "/data" "/data/cert.pem" "/data/key.pem"
            ```
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const releaseAssetsDir = 'release-assets';
            const files = fs.readdirSync(releaseAssetsDir);
            
            for (const file of files) {
              if (file.startsWith('mock-qcc-') && file.endsWith('.zip')) {
                console.log(`Uploading ${file}...`);
                
                const filePath = path.join(releaseAssetsDir, file);
                const fileData = fs.readFileSync(filePath);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ steps.create_release.outputs.id }},
                  name: file,
                  data: fileData,
                  headers: {
                    'content-type': 'application/zip',
                    'content-length': fileData.length
                  }
                });
                
                console.log(`Uploaded ${file}`);
              }
            }